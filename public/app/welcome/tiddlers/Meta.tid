created: 20231218200632951
modified: 20240117170817039
tags: Network
title: Meta
type: text/vnd.tiddlywiki

! msg.network.meta

!! Purpose

The meta property of each message sent by the client contains information that can be used to determine the state of the page in the browser.

!! Contents

|Property|Example|Description|
|source|`TW5`|The package which sent the message|
|version|`v5.3.3`|The version of the package which sent the message|
|location|@@color:#2aa198; object @@|If from a browser - the [ext[window.location|http://devdoc.net/web/developer.mozilla.org/en-US/docs/Web/API/Location.html]]|
|_clientid|`9c3b0bfac300ec56`|Unique id of each client connected to server|
|tiddlers|@@color:#2aa198; array @@|Optional session and client state information|

!! Description

The 'source' references to package which sent the message. 'TW5' is from TiddlyWiki, 'HTML' is from a browser web page, 'Node-Red' is from a TW5-Node-RED server.

'version' indicates the version of the sending package.

'location' references the location of the package sending the message. For browser based clients is the window.location object.

'_clientid' is a unique identifier generated by the client. In the case of a browser, the _clientid is generated whenever a page is loaded or reloaded.

There is an array of 'tiddlers' sent with every request. An empty array indicates no meta tiddlers. Is for application level use and may be updated by either the client or server. The server returns the tiddlers back to the client. For TiddlyWiki clients [[$:/temp/tw5-node-red/data]] and [[$:/temp/tw5-node-red/store]] which are type: x-tiddler-dictionary.

They are for application developer use. Other than network status, login, and permission processing the server is designed to be 'stateless', it hasn't a clue of the status or state of any of the clients. 

That can be problematic for some applications, so these tiddlers can be used to exchange state, status, tokens, session info, counts, paging of data, or just stuff. They can be updated by either side of the connection but by default are only stored client-side.

The system itself does not use them; but are available for higher tech server-side application developers that have a need of getting in-the-weeds when session control is required to build their applications.

!! Sample

<div style="font-size:.8em;">

```json
{
  "source": "TW5",
  "version": "v5.3.3",
  "location": {
    "ancestorOrigins": {},
    "href": "http://localhost:1880/svr/wiki/nodered.html?app=welcome",
    "origin": "http://localhost:1880",
    "protocol": "http:",
    "host": "localhost:1880",
    "hostname": "localhost",
    "port": "1880",
    "pathname": "/svr/wiki/nodered.html",
    "search": "?app=welcome",
    "hash": ""
  },
  "_clientid": "9c3b0bfac300ec56",
  "tiddlers": [
    {
      "title": "$:/temp/tw5-node-red/store",
      "type": "application/json",
      "text": "{ \"title\": \"$:/temp/tw5-node-red/store\" }"
    },
    {
      "title": "$:/temp/tw5-node-red/data",
      "type": "application/x-tiddler-dictionary",
      "text": "title: $:/temp/tw5-node-red/data"
    }
  ]
}
```

</div>
