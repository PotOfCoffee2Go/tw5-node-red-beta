created: 20240106174823357
modified: 20240413014546495
tags: 
title: Test TiddlyWiki « Node-Red » MWS
type: text/vnd.tiddlywiki

---

| [ext[TNR REPL|/svr/wiki/nodered.html?app=repl]] | [ext[Beta Release Notes|/svr/wiki/nodered.html?app=welcome]] | [ext[Test Chat System|/svr/wiki/nodered.html?app=chat]] | [ext[TOC template|/svr/wiki/nodered.html?app=template]] |

---

This TW5-Node-RED application has been set up to interface to Multi Wiki Server. Node-RED can create and change tiddlers in-flight but building an application's tiddlers from scratch using Node-RED 'tiddler editor' can be laborious. So when building a TW5-Node-RED application the current method uses the 'server' edition sync server to easily implement the base tiddlers of the application.  There are a few restictions that are notable.

 * Sync server client (tiddlyweb) does not automatically update tiddlers from exteral sources
 * Is linked into the TiddlyWiki boot process
 * Node-RED unable to dynamilly store server edition tiddlers.

These restrictions are lifted by using MWS and the SQLite database. Plus by using multiple bags can more easily build 'standard' tiddlers that can be used in multiple applications.

To see the Node-RED flows go to <$button actions="<<node-red 'red'>>" class="flow-editor-btn tc-btn-invisible tc-tiddlylink"> Flow Editor </$button>

---

{{Listener}}

> {{Listening for updates}}

The above button will have the server broadcast any changes to the tiddlers in the 'blank' recipe to be sent to this client wiki.


The following tiddlers are currently tagged with 'blank':

```
<<list-links filter:"[tag[blank]]">>
```

> <<list-links filter:"[tag[blank]]">>

Open http://localhost:1880/svr/wiki/notebook.html?app=mwsSender and follow the directions then come back to this tab and see the list of tiddlers received.

---

