caption: Startup
created: 20240402163540249
modified: 20240412070643112
tags: TableOfContents
title: Startup
type: text/vnd.tiddlywiki

!!! Startup
Upon ''npm start'', Node-RED is started from the npm installed <span class="poc2go-dir"> './node_modules/node-red'</span> directory. The settings file used by Node-RED is <span class="poc2go-dir"> './settings.js'</span>.

```
$ npm start

> @potofcoffee2go/tw5-node-red@0.2.0 start
> node ./node_modules/node-red/red.js -s ./settings.js
```

TW5-Node-RED will remove the existing //database.sqlite// database from the <span class="poc2go-dir"> './public/mws/store' </span> directory and recreated with the TiddlyWiki editions that are loaded automatically by TiddlyWiki.

```
Successfully deleted ./public/mws/store/database.sqlite

Copying edition tw5.com/tiddlers
Copying edition dev/tiddlers
mws-initial-load: 11.973s
```

It then starts up Node-RED:

```

Welcome to Node-RED
===================

[info] Node-RED version: v3.1.8-git
[info] Node.js  version: v18.17.0
[info] Linux 5.10.103-v7l+ arm LE
[info] Loading palette nodes
```

The custom 'Tiddler' nodes are loaded which integrate TiddlyWiki with Node-RED as they are being loaded. There are three instances of TiddlyWiki running on the server; '$tw', '$twsync', and '$twmws'.

 * The $tw instance is for the most part out-of-the-box
 ** There might be some TW config tiddlers pre-installed
 *** See <span class="poc2go-dir"> './src/tiddlywiki/main' </span>
 * The $twsync instance is a 'server' edition TiddlyWiki
 ** The wiki it is using is set in the <span class="poc2go-dir"> './settings.js' file </span>
 * The $twmws instance is currently from the TiddlyWiki 'multi-wiki-support' branch

```
[info] +-----------------------------------------------
[info] | tw5-node-red-beta v0.1.3 @potofcoffee2go/tw5-nodes initialized
[info] | TiddlyWiki $tw v5.3.3 boot successful
[info] | TW sync 'server' $twsync - directory './public/app/repl'
[info] | TW MWS $twmws - directory './public/mws'
[info] +-----------------------------------------------
```

The next section displays the Node-RED settings:

```
[info] Settings file  : /home/poc2gopi/Documents/sites/tw5-node-red-beta/settings.js
[info] HTTP Static    : /home/poc2gopi/Documents/sites/tw5-node-red-beta/public > /
[info] Context store  : 'default' [module=memory]
[info] User directory : /home/poc2gopi/Documents/sites/tw5-node-red-beta
[warn] Projects disabled : editorTheme.projects.enabled=false
[info] Flows file     : /home/poc2gopi/Documents/sites/tw5-node-red-beta/flows/tiddlywiki.json
[warn] Encrypted credentials not found
```

The uiBulder package provides the bi-directional socket.io interface between the server and the clients. It does not use any uiBuilder packages or plugins - just the built-in communications system. It is attached to the same host and port being used by Node-RED.

```
[info] +-----------------------------------------------
[info] | uibuilder v6.4.1 initialised
[info] | root folder: /home/poc2gopi/Documents/sites/tw5-node-red-beta/uibuilder
[info] | Using Node-RED's webserver at:
[info] |   http://0.0.0.0:1880/
[info] | Installed packages:
[info] +-----------------------------------------------
```

Node-RED then 'listens' on port 1880 and starts the flows which can be seen using the <$button actions="<<node-red 'red'>>" class="flow-editor-btn tc-btn-invisible tc-tiddlylink"> Flow Editor </$button>.

Tiddlers stored on the server in the <span class="poc2go-dir"> ./public/app </span> directory are loaded to the MWS SQL database. These are wikis created using the TiddlyWiki 'server' edition - which is frequently called 'sync server' in the documentation. This wiki you are reading is <span class="poc2go-dir"> './public/app/repl' </span>.

At this point control of the server is passed on to the flows.

```
[info] Server now running at http://127.0.0.1:1880/red/
[info] Starting flows
[info] [function:Load SQL] Copying TNR blank recipe
[info] [function:Load SQL] Copying TNR chat recipe
[info] [function:Load SQL] Copying TNR default recipe
[info] [function:Load SQL] Copying TNR fiona recipe
[info] [function:Load SQL] Copying TNR intro recipe
[info] [function:Load SQL] Copying TNR mwsSender recipe
[info] [function:Load SQL] Copying TNR mwsTest recipe
[info] [function:Load SQL] Copying TNR repl recipe
[info] [function:Load SQL] Copying TNR template recipe
[info] [function:Load SQL] Copying TNR welcome recipe
[info] Started flows
```

Flows start up the sync server and the Multi Wiki Server TiddlyWikis. These flows are in the 'Network' tab of the <$button actions="<<node-red 'red'>>" class="flow-editor-btn tc-btn-invisible tc-tiddlylink"> Flow Editor </$button>.

The sync server comes up on port 8100 http://localhost:8100 ; while the MWS server is on port 8200 http://localhost:8200 . 

```
[info] [function:TiddlyWiki 'server' edition] Startup - ./public/app/repl
[info] [function:TW Sync Commander] ["--listen","port=8100"]
Serving on http://127.0.0.1:8100
(press ctrl-C to exit)
[info] [function:TiddlyWiki 'multiwikiserver' edition] Startup - ./public/mws
[info] [function:TW MWS Commander] ["--mws-listen","port=8200"]
Serving on http://127.0.0.1:8200
(press ctrl-C to exit)
```

The last process to start up is the REPL which gives JavaScript access to all components of the system.

```
-------------------
Startup REPL
-------------------
$tnr-repl> help.intro()

     ···
```


