[{"id":"3a98d4a7cc479175","type":"tab","label":"TW Multi Wiki","disabled":false,"info":"# Mutli-Wiki-Server Interface\n","env":[]},{"id":"b3eae0cca5f70a1c","type":"group","z":"3a98d4a7cc479175","name":"Setup MWS Database \\n Do this to rebuild MWS database","style":{"label":true,"label-position":"n","color":"#ffbfbf","fill":"#3f93cf"},"nodes":["fe8b9c657dd14575"],"x":52,"y":501,"w":796,"h":282},{"id":"fe8b9c657dd14575","type":"group","z":"3a98d4a7cc479175","g":"b3eae0cca5f70a1c","name":"1. Press 'Delete SQL DB' inject button \\n 2. Enable 'Load SQL' (Deploy) \\n 3. Restart TW5-Node-Red \\n 4. Disable 'Load SQL' (Deploy)","style":{"label":true,"fill":"#3f3f3f","label-position":"n","color":"#dbcbe7"},"nodes":["4cf17dc99028c6b1","2f5d15dbb7f6703c"],"x":78,"y":543,"w":744,"h":214},{"id":"4cf17dc99028c6b1","type":"group","z":"3a98d4a7cc479175","g":"fe8b9c657dd14575","name":"Load ./public/app 'server' \\n editions into MWS SQLite \\n database as recipes","style":{"label":true,"label-position":"n"},"nodes":["5287aee91ed80f4a"],"x":624,"y":617,"w":172,"h":114},{"id":"2f5d15dbb7f6703c","type":"group","z":"3a98d4a7cc479175","g":"fe8b9c657dd14575","name":"Delete SQLite Database \\n This will require a Reboot of TW5-Node-RED","style":{"label":true,"label-position":"n"},"nodes":["ad8d78a24b5b036b","562c59b54e92f9cc"],"x":104,"y":623,"w":492,"h":98},{"id":"747659894c7a96e7","type":"switch","z":"3a98d4a7cc479175","name":"mws","property":"topic","propertyType":"msg","rules":[{"t":"regex","v":"^mws\\/.*$","vt":"str","case":false}],"checkall":"true","repair":false,"outputs":1,"x":200,"y":90,"wires":[["5a16a0adef35c2c0"]]},{"id":"a5a15f950dcbf5eb","type":"link in","z":"3a98d4a7cc479175","name":"From Client","links":["4c9c46b76b72965f"],"x":95,"y":90,"wires":[["747659894c7a96e7"]],"icon":"@potofcoffee2go/tw5-nodes/networkdown.svg"},{"id":"5652efdb88423597","type":"link out","z":"3a98d4a7cc479175","name":"To Client","mode":"link","links":["5f3f98f37ba41eb1"],"x":755,"y":200,"wires":[],"icon":"@potofcoffee2go/tw5-nodes/networkup.svg"},{"id":"5a16a0adef35c2c0","type":"switch","z":"3a98d4a7cc479175","name":"get-bag-all \\n get-recipe-tiddlers \\n get-bag-tiddler \\n save-recipe-tiddlers \\n stop-watch-recipe \\n start-watch-recipe","property":"topic","propertyType":"msg","rules":[{"t":"regex","v":"^mws\\/get-bag-all\\/.*$","vt":"str","case":false},{"t":"regex","v":"^mws\\/get-recipe-tiddlers\\/.*$","vt":"str","case":false},{"t":"regex","v":"^mws\\/get-bag-tiddler\\/.*$","vt":"str","case":false},{"t":"regex","v":"^mws\\/save-recipe-tiddlers\\/.*$","vt":"str","case":false},{"t":"regex","v":"^mws\\/stop-watch-recipe\\/.*$","vt":"str","case":false},{"t":"regex","v":"^mws\\/start-watch-recipe\\/.*$","vt":"str","case":false}],"checkall":"true","repair":false,"outputs":6,"x":160,"y":190,"wires":[["28a27f5b6c9508b4"],["317c61f2e976b9d5"],["3b18349a87ce690e"],["7f9069d458cc7269"],["d687858deb05c1b9"],["879aa07646a78267"]]},{"id":"28a27f5b6c9508b4","type":"function","z":"3a98d4a7cc479175","name":"get-bag-all","func":"const $tw = global.get('$twmws'); // MultiWikiServer TW instance\nconst bag = msg.topic.replace('mws/get-bag-all/', '');\n\nvar sqlTiddlers = [];\nvar tiddlers = $tw.mws.store.getBagTiddlers(bag);\n// Create a JSON tiddler of each tiddler from SQL database\ntiddlers.forEach((tiddler) => {\n    let sqlRec = $tw.mws.store.getBagTiddler(tiddler.title, bag);\n    let mwsTiddler = {\n        title: `mws/bag/${bag}/ ${sqlRec.tiddler.title}`,\n        tags: `mws/bag/${bag}`,\n        type: 'application/json',\n        text: JSON.stringify(sqlRec, null, 2)\n    }\n    \n    sqlTiddlers.push(mwsTiddler);\n});    \n\nmsg.payload = sqlTiddlers;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":110,"wires":[["9163b93163fb2f63"]]},{"id":"9163b93163fb2f63","type":"set-network","z":"3a98d4a7cc479175","name":"","topic":"","networkfield":"network.server.tiddlers","twikiName":"$tw.wiki","filter":"[all[]]","field":"payload","file":"","updtostory":true,"tostory":"false","template":"","clear":false,"editorIsOpen":false,"settingsIsOpen":false,"fromIsOpen":true,"editorIsX":false,"fileIsX":false,"networkIsX":false,"twikiIsX":false,"fieldIsX":true,"x":650,"y":200,"wires":[["5652efdb88423597"]]},{"id":"3b18349a87ce690e","type":"function","z":"3a98d4a7cc479175","name":"get-bag-tiddler","func":"const $tw = global.get('$twmws'); // MultiWikiServer TW instance\nconst cmdparts = msg.topic.split('/');\n// [0] = 'mws', [1] = 'get-bag-tiddler'\nconst bag = cmdparts[2];\nconst title = cmdparts[3];\n\nvar sqlTiddlers = [];\n\n// Create a JSON tiddler from SQL database\n// also set fields in the tiddler using the field name but starts with '_' underbar\nlet sqlRec = $tw.mws.store.getBagTiddler(title, bag);\nlet mwsTiddler = {\n    title: `mws/bag/${bag}/ ${sqlRec.tiddler.title}`,\n    tags: `mws/bag/${bag}`,\n    type: 'application/json',\n    text: JSON.stringify(sqlRec, null, 2),\n    '_tiddler_id': sqlRec.tiddler_id,\n    '_attachment_blob': sqlRec.attachment_blob\n}\n\n// Create copy of fields - starts with an '_' \nObject.keys(sqlRec.tiddler).forEach(fld => {\n    mwsTiddler[`_${fld}`] = sqlRec.tiddler[fld];\n})\n\nsqlTiddlers.push(mwsTiddler);\n\nmsg.payload = sqlTiddlers;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":190,"wires":[["9163b93163fb2f63"]]},{"id":"317c61f2e976b9d5","type":"function","z":"3a98d4a7cc479175","name":"get-recipe-tiddlers","func":"const $tw = global.get('$twmws');\nconst mustache = global.get('mustache');\nconst store = $tw.mws.store;\n\nconst cmdparts = msg.topic.split('/');\n// [0] = 'mws', [1] = 'get-recipe-tiddlers'\nconst reqRecipe = cmdparts[2];\n\nvar tiddlers = [];\n\nvar recipeTiddlerList = store.getRecipeTiddlers(reqRecipe);\nrecipeTiddlerList.forEach(recipe => {\n    tiddlers.push(store.getRecipeTiddler(recipe.title, reqRecipe).tiddler)\n})\nmsg.payload = tiddlers; \n\n// render with mustache\nfor (let i=0; i<msg.payload.length; i++) {\n    if (msg.payload[i].text && msg.payload[i].mustache === 'yes') {\n        msg.payload[i].text = mustache.render(msg.payload[i].text, msg, {}, ['{%', '%}'])\n    }\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":150,"wires":[["9163b93163fb2f63"]]},{"id":"879aa07646a78267","type":"function","z":"3a98d4a7cc479175","d":true,"name":"start-watch-recipe","func":"// See 'On Start' for the event listener\n\n// Register client to listen for events\nconst $tw = global.get('$twmws');\nconst recipes = global.get('recipes');\nconst cmdparts = msg.topic.split('/');\n\n// [0] = 'mws', [1] = 'start-listen-recipe'\nconst recipe = cmdparts[2];\n\nif (recipes[recipe]) {\n    $tw.utils.pushTop(recipes[recipe].clientid, msg.network.meta._clientid);\n    recipes[recipe].msgs[msg.network.meta._clientid] = msg;\n    msg.broadcastId = msg.network.meta._clientid;\n    msg.payload = {\n        title: `Watching recipe ${recipe} for updates`,\n        text: `Started watching for updates to MWS recipe '''${recipe}'''\\n\\n\\n` +\n            `<$button actions=\"<<node-red 'mws/stop-watch-recipe/${recipe}'>>\"> Stop </$button> watching for '''${recipe}''' recipe updates.\\n`\n    }\n    node.send(msg);\n}\n\nnode.done()\nreturn;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n\n// Recipe Event Handler\nfunction onRecipeTiddlersChanged() {\n    const $tw = global.get('$twmws'); // MultiWikiServer TW instance\n    const recipes = global.get('recipes');\n    const mustache = global.get('mustache');\n\n    // Don't know which recipe changed - so check them all\n    for (let recipeName in recipes) {\n        let current_last_tiddler_id = $tw.mws.store.getRecipeLastTiddlerId(recipeName);\n        if (!current_last_tiddler_id || current_last_tiddler_id <= recipes[recipeName].last_known_tiddler_id) {\n            continue;\n        }\n        let recipeTiddlers = $tw.mws.store.getRecipeTiddlers(recipeName, {\n            include_deleted: true,\n            last_known_tiddler_id: recipes[recipeName].last_known_tiddler_id\n        })\n        //console.dir(recipeTiddlers);\n        // Found recipe with tiddler(s) changed\n        if (recipeTiddlers && recipeTiddlers.length) {\n            let tiddlers = [];\n            let deletelist = [];\n            for (let index = recipeTiddlers.length - 1; index >= 0; index--) {\n                const tiddlerInfo = recipeTiddlers[index];\n                if (tiddlerInfo.tiddler_id > recipes[recipeName].last_known_tiddler_id) {\n                    recipes[recipeName].last_known_tiddler_id = tiddlerInfo.tiddler_id;\n                    recipes[recipeName].lastTiddlerInfo = tiddlerInfo;\n                }\n                if (tiddlerInfo.title === '$:/StoryList' || /^Draft of /.test(tiddlerInfo.title)) {\n                    continue;\n                }\n                if (!tiddlerInfo.is_deleted) {\n                    const tiddler = $tw.mws.store.getRecipeTiddler(tiddlerInfo.title, recipeName);\n                    if (tiddler) {\n                        tiddlers.push(tiddler.tiddler);\n                    }\n                } else {\n                    deletelist.push(tiddlerInfo.title);\n                }\n            }\n            // Send to registered client(s)\n            if (tiddlers.length || deletelist.length) {\n                // Remove stale clientids no longer connected\n                const clientIds = global.get('clientIds');\n                recipes[recipeName].clientid.forEach(id => {\n                    if (!clientIds[id]) {\n                        $tw.utils.removeArrayEntries(recipes[recipeName].clientid, id);\n                        delete recipes[recipeName].msgs[id];\n                    }\n                })\n                // mustache substitution\n                recipes[recipeName].clientid.forEach(id => {\n                    var clTiddlers = [];\n                    tiddlers.forEach(tiddler => {\n                        clTiddlers.push(JSON.parse(JSON.stringify(tiddler)));\n                        if (tiddler.text && tiddler.mustache === 'yes') {\n                            clTiddlers[clTiddlers.length - 1].text = mustache.render(tiddler.text, recipes[recipeName].msgs[id], {}, ['{%', '%}']);\n                        }\n                    })\n                    // Broadcast message\n                    var msg = {};\n                    msg.broadcastId = id;\n                    msg.deletelist = deletelist;\n                    msg.recipe = recipes[recipeName];\n                    msg.payload = clTiddlers;\n                    node.send(msg);\n                })\n            }\n        }\n    }\n}\n\n// Place listener in Node-RED global context\nif (!global.get('recipeEvents')) {\n    const $tw = global.get('$twmws'); // MultiWikiServer TW instance\n    global.set('recipeEvent', onRecipeTiddlersChanged);\n    $tw.mws.store.addEventListener(\"change\", global.get('recipeEvent'));\n}\n","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\nconst $tw = global.get('$twmws'); // MultiWikiServer TW instance\n$tw.mws.store.removeEventListener(\"change\", global.get('recipeEvent'));\nglobal.set('recipeEvent', undefined);\n","libs":[],"x":430,"y":320,"wires":[["85842eb9526d44ce"]]},{"id":"85842eb9526d44ce","type":"set-network","z":"3a98d4a7cc479175","name":"","topic":"","networkfield":"network.server.tiddlers","twikiName":"$tw.wiki","filter":"[all[]]","field":"payload","file":"","updtostory":true,"tostory":"false","template":"","clear":false,"editorIsOpen":false,"settingsIsOpen":false,"fromIsOpen":true,"editorIsX":false,"fileIsX":false,"networkIsX":false,"twikiIsX":false,"fieldIsX":true,"x":460,"y":370,"wires":[["485d61633f5c01f4"]]},{"id":"8ecf386acefd8e7d","type":"link out","z":"3a98d4a7cc479175","name":"Broadcast msg","mode":"link","links":["85f96a4f808488c5"],"x":820,"y":370,"wires":[],"l":true},{"id":"7f9069d458cc7269","type":"function","z":"3a98d4a7cc479175","name":"save-recipe-tiddlers","func":"const $tw = global.get('$twmws');\nconst store = $tw.mws.store;\n\nconst cmdparts = msg.topic.split('/');\n// [0] = 'mws', [1] = 'save-recipe-tiddlers'\nconst recipe = cmdparts[2];\n\nvar tiddlers = msg.network.client.tiddlers;\n\nvar results = [];\ntiddlers.forEach(tiddler => {\n\tvar info = store.saveRecipeTiddler(tiddler, recipe);\n\tif (info) {\n\t\tresults.push({\n\t\t\trecipe,\n\t\t\ttitle: tiddler.title,\n\t\t\ttiddler_id: info.tiddler_id,\n\t\t\tbag_name: info.bag_name\n\t\t})\n\t}\n})\n\nmsg.payload = {\n\ttitle: 'Save Results',\n\ttype: 'application/json',\n\ttext: JSON.stringify(results, null, 2)\n}\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":230,"wires":[["9163b93163fb2f63"]]},{"id":"485d61633f5c01f4","type":"function","z":"3a98d4a7cc479175","name":"update delete list","func":"// This node is temporary\n//  Will be implemented into 'tiddler' nodes\n\nmsg.network.server.deletelist = msg.deletelist;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":630,"y":370,"wires":[["8ecf386acefd8e7d"]]},{"id":"d687858deb05c1b9","type":"function","z":"3a98d4a7cc479175","name":"stop-watch-recipe","func":"// Unregister client to stop listening for events\nconst $tw = global.get('$twmws');\nconst recipes = global.get('recipes');\nconst cmdparts = msg.topic.split('/');\n\n// [0] = 'mws', [1] = 'stop-watch-recipe'\nconst recipe = cmdparts[2];\n\nif (recipes[recipe]) {\n    $tw.utils.removeArrayEntries(recipes[recipe].clientid, msg.network.meta._clientid);\n    msg.payload = {\n        title: `Watching recipe ${recipe} for updates`,\n        text: `Stopped watching for updates to MWS recipe '''${recipe}'''\\n\\n\\n` +\n            `<$button actions=\"<<node-red 'mws/start-watch-recipe/${recipe}'>>\"> Start </$button> watching for '''${recipe}''' recipe updates.\\n`\n    }\n    node.send(msg);\n}\n\nnode.done()\nreturn;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\nconst $tw = global.get('$twmws'); // MultiWikiServer TW instance\n$tw.mws.store.removeEventListener(\"change\", global.get('recipeEvent'));\n","libs":[],"x":430,"y":270,"wires":[["9163b93163fb2f63"]]},{"id":"4d92fd82634f9576","type":"http in","z":"3a98d4a7cc479175","name":"","url":"/bags/:bag_name/tiddlers/:title/blob","method":"get","upload":false,"swaggerDoc":"","x":190,"y":430,"wires":[["c1394e6ac2c2e178"]]},{"id":"c1394e6ac2c2e178","type":"function","z":"3a98d4a7cc479175","name":"get-bags-tiddlers-blob","func":"const $tw = global.get('$twmws')\n\n// Get the  parameters\nfunction streamToBuffer(stream) {\n  const chunks = [];\n  return new Promise((resolve, reject) => {\n    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)));\n    stream.on('error', (err) => reject(err));\n    stream.on('end', () => resolve(Buffer.concat(chunks)/*.toString('utf8')*/));\n  })\n}\n\nconst bag_name = msg.req.params.bag_name;\nconst title = msg.req.params.title;\n\nif (bag_name) {\n  const result = $tw.mws.store.getBagTiddlerStream(title,bag_name);\n  if (result) {\n    streamToBuffer(result.stream).then(response => {\n      msg.statusCode = 200;\n      msg.headers = {};\n      msg.headers['Content-Type'] = result.type;\n      msg.payload = response;\n      node.send(msg);\n      node.done();\n    })\n  } else {\n    msg.statusCode = 404;\n    msg.payload = '';\n    node.send(msg);\n    node.done();\n  }\n\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":430,"wires":[["4f1a271151298c03"]]},{"id":"4f1a271151298c03","type":"http response","z":"3a98d4a7cc479175","name":"blob reponse","statusCode":"","headers":{},"x":660,"y":430,"wires":[]},{"id":"5287aee91ed80f4a","type":"function","z":"3a98d4a7cc479175","d":true,"g":"4cf17dc99028c6b1","name":"Load SQL","func":"// See 'On Start' for implementation\nreturn msg;","outputs":0,"timeout":0,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n// TW5-Node-RED recipes\nconst $tw = global.get('$twmws');\nconst fs = global.get('fs');\nconst path = global.get('path');\nconst tw5flags = global.get('tw5flags');\n\nfunction loadTNR() {\n    // List of TW5-Node-RED applications ('server' editions)\n    function editionNames() {\n        const editionFolder = path.resolve(\".\", \"public/app\");\n        return fs\n            .readdirSync(editionFolder, { withFileTypes: true })\n            .filter(dirent => dirent.isDirectory())\n            .map(dirent => dirent.name);\n    }\n    // Copy editions\n    function copyEdition(options) {\n        node.log(`Copying TNR ${options.recipeName} recipe`);\n        $tw.mws.store.createBag(options.bagName, options.bagDescription);\n        $tw.mws.store.createRecipe(options.recipeName, [options.bagName], options.recipeDescription);\n        $tw.mws.store.saveTiddlersFromPath(path.resolve($tw.boot.corePath, $tw.config.editionsPath, options.tiddlersPath), options.bagName);\n        // Enable SSE\n        $tw.mws.store.saveBagTiddler(\n            { title: '$:/config/multiwikiclient/use-server-sent-events', text: 'yes' }, options.bagName\n        );\n    }\n    // Load editions into database.sqlite\n    editionNames().forEach((editionName) => {\n        copyEdition({\n            bagName: editionName,\n            bagDescription: `TW5-Node-RED ${editionName}`,\n            recipeName: editionName,\n            recipeDescription: `TW5-Node-RED ${editionName}`,\n            tiddlersPath: path.resolve(\".\", `public/app/${editionName}/tiddlers`)\n        })\n    })\n    tw5flags.SqlLoaded = true;\n}\n\n\n// Record info about recipes - last_known_tiddler_id, lastTiddlerInfo, etc.\nfunction setRecipeState() {\n    var recipes = {};\n    $tw.mws.store.listRecipes().forEach(recipe => {\n        var last_known_tiddler_id = 0;\n        var lastTiddlerInfo = {};\n        // Get the tiddlers in the recipe\n        var recipeTiddlers = $tw.mws.store.getRecipeTiddlers(recipe.recipe_name, {\n            include_deleted: true,\n            last_known_tiddler_id: 0\n        });\n        // Got tiddlers so update recipe info\n        if (recipeTiddlers) {\n            for (let index = recipeTiddlers.length - 1; index >= 0; index--) {\n                const tiddlerInfo = recipeTiddlers[index];\n                if (tiddlerInfo.tiddler_id > last_known_tiddler_id) {\n                    last_known_tiddler_id = tiddlerInfo.tiddler_id;\n                    lastTiddlerInfo = tiddlerInfo;\n                }\n            }\n        }\n        // Remember current info\n        recipes[recipe.recipe_name] = {\n            last_known_tiddler_id,\n            clientid: [],\n            msgs: {},\n            recipe,\n            lastTiddlerInfo\n        }\n    })\n\n    global.set('recipes', recipes);\n}\n\nif (!tw5flags.SqlLoaded) {\n    loadTNR();\n    setRecipeState();\n}\n\n","finalize":"","libs":[],"x":710,"y":690,"wires":[]},{"id":"ad8d78a24b5b036b","type":"function","z":"3a98d4a7cc479175","g":"2f5d15dbb7f6703c","name":"Delete SQLite database","func":"//fs.rmSync(dir, { recursive: true, force: true });\n\nconst mws = './public/mws/';\nconst store = mws + 'store';\nconst tiddlers = mws + 'tiddlers';\n\nfunction deleteDir(dir) {\n    try {\n        global.get('fs').rmSync(dir, { recursive: true, force: true });\n        node.log(`Successfully deleted ${dir}`);\n        node.warn(`Reboot Required`);\n    } catch (e) {\n        node.error(`Delete of ${dir} unsuccessful`);\n        node.error(`${e.message}`);\n    }\n}\nconsole.log('');\ndeleteDir(store);\ndeleteDir(tiddlers);\n\nreturn msg;","outputs":0,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":680,"wires":[]},{"id":"562c59b54e92f9cc","type":"inject","z":"3a98d4a7cc479175","g":"2f5d15dbb7f6703c","name":"Delete SQL DB","props":[{"p":"commands","v":"[\"--mws-listen\",\"port=8200\"]","vt":"json"},{"p":"mwsStartup","v":"MultiWikiServer Started","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":"2","topic":"","x":230,"y":680,"wires":[["ad8d78a24b5b036b"]]}]